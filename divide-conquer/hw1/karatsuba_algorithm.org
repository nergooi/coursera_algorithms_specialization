-*- mode: org; -*-
#+PROPERTY: header-args :session general-purpose_0 :kernel python3 :async yes :display plain

* The algorithm

* The Implement by python
#+begin_src jupyter-python
  def KaratsubaMul(x:int, y:int):

      # The base case
      if len(str(x)) == 1 or len(str(y)) == 1:
          return x*y

      else:
          sx, sy = str(x), str(y)
          n = min(len(str(x)), len(str(y)))
          #assert isinstance(n, int)

          mid = n//2
          a = int(sx[:len(str(x)) - mid])
          b = int(sx[len(str(x)) - mid:])
          c = int(sy[:len(str(y)) - mid])
          d = int(sy[len(str(y)) - mid:])
          ac = KaratsubaMul(a, c)
          bd = KaratsubaMul(b, d)

          cross = KaratsubaMul(a + b, c + d) - ac - bd
          return ac*10**(2*mid) + (cross)*10**mid + bd
#+end_src

#+RESULTS:

#+begin_src jupyter-python
  # leading zeros in decimal integer show be eliminated.
  # Actually, python does not permit leading zero showing in the
  # decimal integer.
  int("02")
#+end_src

#+RESULTS:
: 2

#+begin_src jupyter-python
  x, y = 3917, 8813
  print(KaratsubaMul(x, y), x*y)
#+end_src


#+begin_src jupyter-python
  # Small numbers test
  assert KaratsubaMul(1,2) == 1*2
  assert KaratsubaMul(19,9) == 19*9
  assert KaratsubaMul(9, 19) == 9 * 19
  assert KaratsubaMul(99999, 99) == 99999 * 99
  assert KaratsubaMul(101,102) == 101*102
  assert KaratsubaMul(3977, 8813) == 3977*8813
#+end_src

#+begin_src jupyter-python
  import random
  random.seed(0)
  a, b = 10000, 1000000
  assert a < b
  for _ in range(5):
      x, y = random.randint(a, b), random.randint(a, b)
      print(x, y)
      m = x*y
      assert KaratsubaMul(x, y) == m and KaratsubaMul(y, x) == m
  print("Test ended.")
#+end_src

#+begin_src jupyter-python
    x, y=88, 999991551551900051548
    %timeit -n 5 x*y
    %timeit -n 5 KaratsubaMul(x, y)
#+end_src

#+RESULTS:
: 364 ns ± 233 ns per loop (mean ± std. dev. of 7 runs, 5 loops each)
: 28.5 µs ± 6.06 µs per loop (mean ± std. dev. of 7 runs, 5 loops each)


#+begin_src jupyter-python
  x, y = 3141592653589793238462643383279502884197169399375105820974944592, 2718281828459045235360287471352662497757247093699959574966967627
  assert x*y == KaratsubaMul(x, y)
  %timeit -n 1 x*y
  %timeit -n 1 KaratsubaMul(x, y)
  print(KaratsubaMul(x, y))
#+end_src

#+RESULTS:
: The slowest run took 6.30 times longer than the fastest. This could mean that an intermediate result is being cached.
: 1.28 µs ± 1.24 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)
: 7.81 ms ± 1.04 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
: 8539734222673567065463550869546574495034888535765114961879601127067743044893204848617875072216249073013374895871952806582723184
